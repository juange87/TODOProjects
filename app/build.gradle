apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'shot'

apply from: "../config/jacoco.gradle"

android {
    compileSdkVersion Core.compileSdkVersion
    defaultConfig {
        applicationId "$Core.applicationId"
        minSdkVersion Core.minSdkVersion
        targetSdkVersion Core.targetSdkVersion
        versionCode ProjectVersion.code
        versionName "$ProjectVersion.name"
        testInstrumentationRunner "$Core.testInstrumentationRunner"
        testApplicationId Core.testApplicationId
    }

    sourceSets {
        test.java.srcDirs += 'src/integration/java'
        test.resources.srcDirs += 'src/integration/res'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }
}

shot {
    appId = "$Core.applicationId"
    instrumentationTestTask = 'connectedDebugAndroidTest'
    packageTestApkTask = 'packageDebugAndroidTest'
}

kapt {
    generateStubs = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //KOTLIN
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$Libs.kotlinVersion"

    //ANDROID
    implementation "com.android.support:appcompat-v7:$Libs.appCompatVersion"
    implementation "com.android.support.constraint:constraint-layout:$Libs.constraintLayoutVersion"
    implementation "com.android.support:recyclerview-v7:$Libs.appCompatVersion"
    implementation "com.android.support:cardview-v7:$Libs.appCompatVersion"
    implementation "com.android.support:design:$Libs.appCompatVersion"

    //DAGGER
    implementation "com.google.dagger:dagger:$Libs.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$Libs.daggerVersion"

    //RXJAVA 2
    implementation "io.reactivex.rxjava2:rxandroid:$Libs.rxAndroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$Libs.rxJavaVersion"

    //COROUTINES
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$Libs.coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$Libs.coroutinesVersion"

    //ROOM
    implementation "android.arch.persistence.room:runtime:$Libs.roomVersion"
    implementation "android.arch.persistence.room:rxjava2:$Libs.roomVersion"
    kapt "android.arch.persistence.room:compiler:$Libs.roomVersion"

    //NET
    implementation "com.squareup.retrofit2:retrofit:$Libs.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$Libs.gsonConverterVersion"
    implementation "com.squareup.okhttp3:okhttp:$Libs.okhttpVersion"

    implementation "com.squareup.picasso:picasso:$Libs.picasoVersion"

    //TEST
    testImplementation "junit:junit:$Tests.jUnitVersion"
    testImplementation "org.mockito:mockito-core:$Tests.mockitoVersion"
    testImplementation "io.mockk:mockk:$Tests.mockkVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$Libs.okhttpVersion"

    androidTestImplementation "com.android.support.test:runner:$Tests.testRunnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$Tests.espressoVersion"
    androidTestImplementation("com.android.support.test:rules:$Tests.testRulesVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-intents:$Tests.espressoVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-contrib:$Tests.espressoVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500" // or whatever number you want
    }
}